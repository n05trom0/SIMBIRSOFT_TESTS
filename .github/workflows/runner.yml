name: SIMBIRSOFT_TESTS
on:
  # ЗАПУСК ОСУЩЕСТВЛЯЕТСЯ ПРИ КАЖДОМ ПУШЕ В РЕПОЗИТОРИЙ В ВЕТКУ main
  push:
    branches:
      - main 
  # ЗАПУСК ОСУЩЕСТВЛЯЕТСЯ КАЖДЫЙ ДЕНЬ В 3:00 И 12:00
  # schedule:
  #     - cron: '0 3,12 * * *'

# ДОСТУПЫ К КОНТЕНТУ, СТРАНИЦАМ И ТОКЕНУ
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # ПЕРВАЯ ДЖОБА, ДЛЯ ВЫГРУЗКИ ИСТОРИИ (ЕСЛИ ОНА ЕСТЬ), ЕСЛИ ИСТОРИИ НЕТ, ПРИ ПЕРВОМ ЗАПУСКЕ
  # ПОКАЖЕТ ОШИБКУ, Т.К. НЕЧЕГО ВЫГРУЖАТЬ. ПРИ ПОВТОРНОМ ЗАПУСКЕ ВЫГРУЗИТ ИСТОРИЮ ДЛЯ ОТЧЕТА
#   download-history:
#     runs-on: ubuntu-latest
#     name: Download history
#     steps:
#       - name: setup Python
#         uses: actions/setup-python@v4
#         with:
#           python-version: "3.10"
#       # В КОМАНДАХ НИЖЕ УКАЗАН ТОКЕН ДОСТУПА К РЕПОЗИТОРИЮ, ИСКАТЬ В Developer Settings GitHub - Personal Access Token(classic)
#       - run: >
#           ARTIFACT_ID=$(curl -L
#           -H "Accept: application/vnd.github+json"
#           -H "Authorization: Bearer ${{ secrets.TOKEN }}"
#           -H "X-GitHub-Api-Version: 2022-11-28"
#           "https://api.github.com/repos/n05trom0/SIMBIRSOFT_TESTS/actions/artifacts?name=allure-results" 
#           | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);")
#           &&
#           curl -L
#           -H "Accept: application/vnd.github+json"
#           -H "Authorization: Bearer ${{ secrets.TOKEN }}"
#           -H "X-GitHub-Api-Version: 2022-11-28"
#           https://api.github.com/repos/n05trom0/SIMBIRSOFT_TESTS/actions/artifacts/$ARTIFACT_ID/zip 
#           -o artifacts.zip
#           &&
#           REPORT_ID=$(curl -L
#           -H "Accept: application/vnd.github+json"
#           -H "Authorization: Bearer ${{ secrets.TOKEN }}"
#           -H "X-GitHub-Api-Version: 2022-11-28"
#           "https://api.github.com/repos/n05trom0/SIMBIRSOFT_TESTS/actions/artifacts?name=github-pages" 
#           | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);")
#           &&
#           curl -L
#           -H "Accept: application/vnd.github+json"
#           -H "Authorization: Bearer ${{ secrets.TOKEN }}"
#           -H "X-GitHub-Api-Version: 2022-11-28"
#           https://api.github.com/repos/n05trom0/SIMBIRSOFT_TESTS/actions/artifacts/$REPORT_ID/zip 
#           -o pages.zip
#       # ПОСЛЕ ЗАГРУЗКИ ВСЕХ АРТЕФАКТОВ, СОЗДАЕМ ДИРЕКТОРИЮ allure-results И РАЗАРХИВИРУЕМ ВНЕШНИЕ АРТЕФАКТЫ
#       - run: mkdir allure-results && unzip artifacts.zip -d allure-results
#       # ТАКЖЕ СОЗДАЕМ ДИРЕКТОРИИ pages_history И old_pages И РАЗАРХИВИРУЕМ ВНЕШНИЕ КОПИИ ПРЕДЫДУЩИХ СТРАНИЦ
#       - run: mkdir old_pages pages_history && unzip pages.zip -d old_pages && tar -xvf old_pages/artifact.tar -C pages_history
#       - run: cp pages_history/history/* allure-results && cp -r pages_history/history allure-results
#       - name: Store allure history
#         uses: actions/upload-artifact@v3
#         # УСЛОВИЕ ХРАНЕНИЯ ЗАГРУЖЕННЫХ МАТЕРИАЛОВ 1 ДЕНЬ
#         with:
#           name: allure-results
#           path:
#             allure-results
#           retention-days: 1

  # ВТОРАЯ ДЖОБА, ЗАПУСК ТЕСТОВ.
  # УСЛОВИЕ needs:download-history ОБЯЗАТЕЛЬНОЕ, ДЛЯ ВТОРОГО И ПОСЛЕДУЮЩИХ ЗАПУСКОВ
  test: 
    runs-on: ubuntu-latest
    # needs: download-history
    name: Run tests

    steps:
      - name: сheckout repository
        uses: actions/checkout@v3
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      # УСТАНАВЛИВАЕМ chrome browser В Ubuntu
      - name: install Chrome
        run: sudo apt-get install google-chrome-stable
      # УСТАНАВЛИВАЕМ ПАКЕТНЫЙ МЕНЕДЖЕР pip И ОБНОВЛЯЕМ ЕГО
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
      # УСТАНАВЛИВАЕМ ЗАВИСИМОСТИ
      - name: install dependencies
        run: pip install -r requirements.txt
      # ЗАГРУЖАЕМ АРТЕФАКТЫ, СОЗДАЕМ ДИРЕКТОРИЮ allure-results И РАЗАРХИВИРУЕМ ВНЕШНИЕ АРТЕФАКТЫ
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      # ЗАПУСКАЕМ ТЕСТЫ С ПРИМЕНЕНИЕМ allure-results
      - name: run tests
        run: pytest --alluredir=allure-results 
        # ПАРАМЕТР ОТВЕЧАЕТ ЗА ПРОПУСК ОШИБОЧНЫХ ТЕСТОВ, ДЛЯ ЗАВЕРШЕНИЯ ВСЕХ ПОСЛЕДУЮЩИХ
        continue-on-error: true
      # СОБИРАЕМ ИНФОРМАЦИЮ ОТЧЕТА
      - name: Store allure reslts
        uses: actions/upload-artifact@v3
        # УСЛОВИЕ ХРАНЕНИЯ ЗАГРУЖЕННЫХ МАТЕРИАЛОВ 1 ДЕНЬ
        with:
          name: allure-results
          path: 
            allure-results
          retention-days: 1
            # НИЖЕ ЗАКОММЕНТИРОВАНЫ СТРОКИ С ОКРУЖЕНИЕМ ДЛЯ РАССЫЛКИ ПО ПОЧТЕ
            # env:
            #   SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
            #   SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
            #   SMTP_PASS: ${{ secrets.SMTP_PASS }}
            #   SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
            #   RECEIVER_EMAIL: ${{ secrets.RECEIVER_EMAIL }}
  
  # ТРЕТЬЯ ДЖОБА, ГЕНЕРАЦИЯ ОТЧЕТА.
  # УСЛОВИЕ needs:test ОБЯЗАТЕЛЬНОЕ.
  generate-report:
    runs-on: ubuntu-latest
    needs: test
    name: Generate report
    steps:
      - uses: actions/setup-java@v3
        with:
          distribution: 'microsoft'
          java-version: '17'
      - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.23.1/allure-2.23.1.tgz && sudo tar -zxvf allure-2.23.1.tgz -C /opt/ && sudo ln -s /opt/allure-2.23.1/bin/allure /usr/bin/allure
      # ЗАГРУЖАЕМ АРТЕФАКТЫ, СОЗДАЕМ ДИРЕКТОРИЮ allure-results И РАЗАРХИВИРУЕМ ВНЕШНИЕ АРТЕФАКТЫ
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      # ГЕНЕРИРУЕМ ОТЧЕТ И РАЗРЕШАЕМ ПУБЛИКАЦИЮ ОТЧЕТА
      - run: allure generate -c allure-results -o _site
      - name: Store generated report
        uses: actions/upload-artifact@v3
        # УСЛОВИЕ ХРАНЕНИЯ ЗАГРУЖЕННЫХ МАТЕРИАЛОВ 1 ДЕНЬ
        with:
          name: _site
          path: 
            _site
          retention-days: 1

  # ЧЕТВЕРТАЯ ДЖОБА, ПУБЛИКАЦИЯ ОТЧЕТА.
  # УСЛОВИЕ needs:generate-report ОБЯЗАТЕЛЬНОЕ.
  publish-report:
    runs-on: ubuntu-latest
    needs: generate-report
    name: Publication report
    steps:
      # ЗАГРУЖАЕМ АРТЕФАКТЫ
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
      # РАЗРЕШАЕМ ПУБЛИКАЦИЮ ОТЧЕТА
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v2
      # ДЕПЛОИМ ОТЧЕТ НА GitHub Pages
      - name: Deploy to GitHb Pages
        id: deployment
        uses: actions/deploy-pages@v1.2.9
